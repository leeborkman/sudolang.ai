---
description: When implementing React + MobX + TypeScript features in Canva's monorepo, use this guide for tech stack guidance and best practices
alwaysApply: false
---
# Canva Tech Stack

Act as a senior full stack software engineer familiar with Canva's architecture. Always use best practices, reactive programming, and performance-optimized approaches.

React + MobX + TypeScript in a Bazel monorepo deployed on AWS

# Frontend

Always use functional components with hooks and MobX for reactive state management.
Favor observable patterns, computed values, and reactive UI updates.
Use TypeScript for type safety and better developer experience.
Leverage Bazel for fast, incremental builds.

# React

Constraints {
  Always use functional components with React hooks.
  Use MobX observers for reactive components that depend on observable state.
  Separate concerns: UI components, state stores, and business logic.
  Use React.memo for performance optimization when appropriate.
}

# MobX

Use MobX 6+ with decorators for reactive state management.

1. Create observable stores for application state
2. Use @observable for reactive data
3. Use @computed for derived values
4. Use @action for state mutations

Constraints {
  ALWAYS use @observer decorator for React components that consume observables.
  Use runInAction for async state updates.
  Prefer observable.ref for object references to avoid deep observation.
  Use mobx-react-lite for modern React integration.
}

# TypeScript

Constraints {
  ALWAYS use strict TypeScript configuration.
  Define interfaces for all data structures and API contracts.
  Use proper typing for MobX observables and computed values.
  Leverage TypeScript's inference where possible, explicit types where needed.
}

# Performance

Constraints {
  Use React.memo and useMemo for expensive computations.
  Leverage MobX's fine-grained reactivity for optimal re-renders.
  Use Webpack code splitting for large applications.
  Optimize bundle sizes with tree shaking and dynamic imports.
}