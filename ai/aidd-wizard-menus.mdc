---
description: Menu definitions and templates for AIDD wizard workflows
alwaysApply: false
---

# Wizard Menu Library

Reusable menu templates for consistent wizard experience.

## Menu Components

MenuOption {
  number: 1..9
  icon: emoji
  label: string
  description?: string // shown in beginner mode
  example?: string
  recommended?: boolean
}

Menu {
  id: string
  title: string
  context?: string
  options: [MenuOption]
  recommendation?: string
  helpText?: string
  nextMenu: (choice) => MenuId
}

## Standard Menus

### Main Menu

```
mainMenu = {
  id: 'main',
  title: '👋 Welcome to AIDD!',
  context: null,
  options: [
    {
      number: 1,
      icon: '🆕',
      label: 'Start a new feature or task',
      description: 'Create and execute new work'
    },
    {
      number: 2,
      icon: '▶️',
      label: 'Continue working on existing task',
      description: 'Resume in-progress or start pending task'
    },
    {
      number: 3,
      icon: '📊',
      label: 'Review current project status',
      description: 'See metrics, progress, and recommendations'
    },
    {
      number: 4,
      icon: '📐',
      label: 'High-Level Design Doc',
      description: 'Plan architecture with options analysis'
    },
    {
      number: 5,
      icon: '🔍',
      label: 'Product discovery',
      description: 'Explore problem space and user research'
    },
    {
      number: 6,
      icon: '❓',
      label: 'Learn about AIDD',
      description: 'Tutorial and command reference'
    }
  ],
  helpText: 'Type the number of your choice. New feature? Try [4] for architecture planning.',
  nextMenu: routeToWorkflow
}
```

### Knowledge Level Menu

```
knowledgeMenu = {
  id: 'knowledge',
  title: '🎯 Planning Approach',
  context: 'How much planning have you done for this feature?',
  options: [
    {
      number: 1,
      icon: '📐',
      label: 'Need architecture planning',
      description: 'Explore options and make technical decisions first',
      note: 'Recommended for new features - uses /hldd workflow'
    },
    {
      number: 2,
      icon: '✅',
      label: 'Architecture decided - ready for tasks',
      description: 'Skip to task creation, know what to build'
    },
    {
      number: 3,
      icon: '🔍',
      label: 'Need product discovery',
      description: 'Explore problem space and user needs first'
    },
    {
      number: 4,
      icon: '🤔',
      label: 'Not sure - help me decide',
      description: 'AI will recommend approach'
    }
  ],
  recommendation: '[1] for new features, [2] if architecture is clear',
  helpText: 'HLDD (option 1) helps avoid costly rework by planning architecture first',
  nextMenu: (choice) => {
    1 => 'hlddWizard',
    2 => 'scopeMenu',
    3 => 'productDiscovery',
    4 => 'analyzeAndRecommend'
  }
}
```

### Scope Selection Menu

```
scopeMenu = {
  id: 'scope',
  title: '📏 What\'s the scope of this work?',
  options: [
    {
      number: 1,
      icon: '🔧',
      label: 'Small fix or enhancement',
      description: '1-2 hours, <50 lines',
      example: 'Add prop, fix bug, update styling'
    },
    {
      number: 2,
      icon: '🏗️',
      label: 'New component or feature',
      description: '3-6 hours, 50-150 lines',
      example: 'Create component, integrate API',
      recommended: true
    },
    {
      number: 3,
      icon: '🏛️',
      label: 'Complex feature',
      description: '1-2 days, 150-500 lines',
      example: 'Major feature with state management'
    },
    {
      number: 4,
      icon: '🌐',
      label: 'Large epic',
      description: 'Multiple days, >500 lines',
      example: 'Complete feature set, system integration'
    }
  ],
  recommendation: (desc) => inferScope(desc),
  helpText: 'Large tasks auto-break into smaller sub-tasks',
  nextMenu: () => 'description'
}
```

### State Management Menu

```
stateManagementMenu = {
  id: 'stateManagement',
  title: '🔄 State Management Strategy',
  context: 'Will this component need reactive state (data that changes over time)?',
  options: [
    {
      number: 1,
      icon: '🎯',
      label: 'No - Component only displays data from props',
      description: 'Best for: Presentational components, static layouts'
    },
    {
      number: 2,
      icon: '🔄',
      label: 'Yes - Component manages its own state',
      description: 'Best for: Interactive widgets, forms, dynamic UIs'
    },
    {
      number: 3,
      icon: '❓',
      label: 'Not sure - Help me decide',
      description: 'I\'ll analyze and recommend'
    }
  ],
  recommendation: (component) => inferStateNeeds(component),
  helpText: 'Affects whether we use MobX or keep it simple',
  nextMenu: () => 'testing'
}
```

### Testing Level Menu

```
testingMenu = {
  id: 'testing',
  title: '🧪 Testing Level',
  context: 'How comprehensive should the test coverage be?',
  options: [
    {
      number: 1,
      icon: '⚡',
      label: 'Basic',
      description: 'Happy path + error case (4-6 tests, ~30 min)'
    },
    {
      number: 2,
      icon: '✅',
      label: 'Standard',
      description: 'All requirements covered (8-12 tests, ~1 hour)',
      recommended: true
    },
    {
      number: 3,
      icon: '🎯',
      label: 'Comprehensive',
      description: 'Edge cases + integration (15+ tests, ~2 hours)'
    }
  ],
  recommendation: '[2] - Good balance of coverage and speed',
  helpText: 'TDD process used regardless of level chosen',
  nextMenu: () => 'storybook'
}
```

### Storybook Coverage Menu

```
storybookMenu = {
  id: 'storybook',
  title: '📖 Storybook Coverage',
  context: 'How many component states should have stories? (UI components only)',
  options: [
    {
      number: 1,
      icon: '⚡',
      label: 'Basic',
      description: 'Default + one variant (2-3 stories, ~15-20 min)'
    },
    {
      number: 2,
      icon: '✅',
      label: 'Standard',
      description: 'All major states (4-6 stories, ~30-45 min)',
      recommended: true
    },
    {
      number: 3,
      icon: '🎯',
      label: 'Comprehensive',
      description: 'All states + responsive (8-12 stories, ~1-1.5 hours)'
    },
    {
      number: 4,
      icon: '❌',
      label: 'Not Applicable',
      description: 'This is not a UI component (utility/type/store)'
    }
  ],
  recommendation: '[2] - Match testing coverage level',
  helpText: 'Stories are as important as tests for UI components. Press ? for why.',
  nextMenu: () => 'designSystem'
}
```

### Design System Menu

```
designSystemMenu = {
  id: 'designSystem',
  title: '🎨 Design System Usage',
  context: 'How should this component be styled?',
  options: [
    {
      number: 1,
      icon: '✅',
      label: (ds) => `Use ${ds} exclusively`,
      description: 'Follows your aidd-org-ui.mdc guidelines',
      recommended: true
    },
    {
      number: 2,
      icon: '⚠️',
      label: (ds) => `Mix of ${ds} + custom CSS`,
      description: 'May violate project standards'
    },
    {
      number: 3,
      icon: '🎨',
      label: 'Custom styling only',
      description: 'Will need style guide review'
    }
  ],
  recommendation: (policy) => `[1] - Your project policy: ${policy}`,
  nextMenu: () => 'complexity'
}
```

### Execution Mode Menu

```
executionMenu = {
  id: 'execution',
  title: '⚙️ Execution Mode',
  context: 'How should I proceed with implementation?',
  options: [
    {
      number: 1,
      icon: '🤖',
      label: 'Full auto',
      description: 'Execute all steps, pause only on failures'
    },
    {
      number: 2,
      icon: '👀',
      label: 'Semi-auto',
      description: 'Show each step, wait for approval',
      recommended: true
    },
    {
      number: 3,
      icon: '🐢',
      label: 'Manual',
      description: 'Explicit approval at every checkpoint'
    }
  ],
  recommendation: '[2] for first-time tasks, [1] once familiar',
  helpText: 'All modes use TDD and run validations',
  nextMenu: () => 'execute'
}
```

### Completion Menu

```
completionMenu = {
  id: 'completion',
  title: '🎉 All Steps Complete!',
  context: (summary) => `${summary}

**AWAITING YOUR APPROVAL TO MARK TASK COMPLETE**

All validations have passed. Please review the results above.`,
  options: [
    {
      number: 1,
      icon: '✅',
      label: 'Approve completion - Mark task complete',
      recommended: true,
      description: 'Updates task status to completed'
    },
    {
      number: 2,
      icon: '🔍',
      label: 'Review validation details',
      description: 'Show all validation outputs'
    },
    {
      number: 3,
      icon: '📊',
      label: 'Show implementation summary',
      description: 'Detailed breakdown of what was built'
    },
    {
      number: 4,
      icon: '❌',
      label: 'Request changes - Task needs revision',
      description: 'Return to implementation'
    },
    {
      number: 5,
      icon: '⏸️',
      label: 'Pause here - Don\'t mark complete yet',
      description: 'Save progress without completing'
    }
  ],
  helpText: 'CRITICAL: Task status only updated to completed if you choose [1]',
  nextMenu: (choice) => {
    1 => 'postCompletion',
    2 => 'validationDetails',
    3 => 'implementationSummary',
    4 => 'revisionRequest',
    5 => 'pause'
  }
}
```

### Post-Completion Menu

```
postCompletionMenu = {
  id: 'postCompletion',
  title: '✅ Task Marked Complete!',
  context: 'Task status updated to completed in aidd-planning/aidd-eng-plan.md',
  options: [
    {
      number: 1,
      icon: '📝',
      label: 'Log completion to activity log',
      recommended: true
    },
    {
      number: 2,
      icon: '🔬',
      label: 'Run code review'
    },
    {
      number: 3,
      icon: '💾',
      label: 'Commit changes'
    },
    {
      number: 4,
      icon: '▶️',
      label: 'Start next task'
    },
    {
      number: 5,
      icon: '📊',
      label: 'Show detailed metrics'
    }
  ],
  recommendation: 'Typical flow: [1] Log → [3] Commit',
  nextMenu: (choice) => {
    1 => 'logging',
    2 => 'review',
    3 => 'commit',
    4 => 'main',
    5 => 'metrics'
  }
}
```

### Yes/No Menu Template

```
yesNoMenu(question, yesAction, noAction) {
  return {
    id: 'yesNo',
    title: question,
    options: [
      { number: 1, icon: '✅', label: 'Yes' },
      { number: 2, icon: '❌', label: 'No' }
    ],
    nextMenu: (choice) => choice === 1 ? yesAction : noAction
  }
}
```

### Confirmation Menu Template

```
confirmMenu(action, details) {
  return {
    id: 'confirm',
    title: `Confirm ${action}`,
    context: details,
    options: [
      { number: 1, icon: '✅', label: 'Confirm and proceed' },
      { number: 2, icon: '✏️', label: 'Modify first' },
      { number: 3, icon: '❌', label: 'Cancel' }
    ],
    recommendation: '[1] if details look correct'
  }
}
```

### HLDD Options Review Menu

```
optionsReviewMenu = {
  id: 'optionsReview',
  title: '📊 Options Document Generated',
  context: (optionsDoc) => `
File created: aidd-planning/options-${optionsDoc.featureName}.md

Found ${optionsDoc.decisions.length} engineering decisions to make.
`,
  options: [
    {
      number: 1,
      icon: '🎯',
      label: 'Start making decisions now',
      description: 'Interactive walkthrough with recommendations',
      recommended: true
    },
    {
      number: 2,
      icon: '📝',
      label: 'Review options document first',
      description: 'Read all options before deciding'
    },
    {
      number: 3,
      icon: '💾',
      label: 'Save and decide later',
      description: 'Exit wizard, run /decisions when ready'
    },
    {
      number: 4,
      icon: '✏️',
      label: 'Modify options document',
      description: 'Add or change alternatives'
    }
  ],
  recommendation: '[1] to proceed with guided decision-making',
  nextMenu: (choice) => {
    1 => 'decisionWalkthrough',
    2 => 'showOptionsDoc',
    3 => 'saveAndExit',
    4 => 'editOptions'
  }
}
```

### Decision Menu Template

```
decisionMenu(decisionData, currentNum, totalNum) {
  return {
    id: 'decision',
    title: `🎯 Decision ${currentNum} of ${totalNum}: ${decisionData.question}`,
    context: `
**Context:** ${decisionData.context}

${decisionData.options.map((opt, i) => `
[ ${i+1} ] ${opt.name}
      ✅ Pros: ${opt.pros.join(', ')}
      ❌ Cons: ${opt.cons.join(', ')}
      Impact: ${opt.impact}
`).join('\n')}

💡 AI Recommendation: [${decisionData.recommendationIndex}] ${decisionData.recommendation}
   Reasoning: ${decisionData.reasoning}
   Confidence: ${decisionData.confidence}
`,
    options: decisionData.options.map((opt, i) => ({
      number: i + 1,
      icon: i === decisionData.recommendationIndex - 1 ? '⭐' : '🔶',
      label: opt.name
    })),
    recommendation: `[${decisionData.recommendationIndex}] - ${decisionData.reasoning}`,
    helpText: 'Press ? to see detailed trade-off analysis',
    nextMenu: () => 'rationaleCapture'
  }
}
```

### Decisions Complete Menu

```
decisionsCompleteMenu = {
  id: 'decisionsComplete',
  title: '🎉 All Decisions Made!',
  context: (decisions) => `
Decisions recorded: ${decisions.length}

**Your Choices:**
${decisions.map((d, i) => `${i+1}. ${d.question} → ${d.chosen}`).join('\n')}

File saved: aidd-planning/decisions-${decisions.featureName}.yaml
`,
  options: [
    {
      number: 1,
      icon: '📐',
      label: 'Generate Engineering Plan',
      description: 'Create aidd-eng-plan.md from decisions',
      recommended: true
    },
    {
      number: 2,
      icon: '🔍',
      label: 'Review decisions',
      description: 'See all choices made'
    },
    {
      number: 3,
      icon: '✏️',
      label: 'Change a decision',
      description: 'Go back and modify'
    },
    {
      number: 4,
      icon: '💾',
      label: 'Save and exit',
      description: 'Generate eng-plan later'
    }
  ],
  recommendation: '[1] to complete the HLDD process',
  nextMenu: (choice) => {
    1 => 'generateEngPlan',
    2 => 'reviewDecisions',
    3 => 'changeDecision',
    4 => 'exit'
  }
}
```

### Engineering Plan Review Menu

```
engPlanReviewMenu = {
  id: 'engPlanReview',
  title: '📐 Engineering Plan Generated',
  context: (engPlan) => `
File: aidd-planning/aidd-eng-plan.md

**Plan Includes:**
- Overview and scope
- Architecture based on your decisions
- ${engPlan.phases.length} implementation phases
- ${engPlan.tasks.length} high-level tasks
- Success metrics and timeline
- Risk mitigation strategies
- Complete decision record

**Estimated Timeline:** ${engPlan.estimatedTimeline}
`,
  options: [
    {
      number: 1,
      icon: '✅',
      label: 'Approve and save plan',
      recommended: true
    },
    {
      number: 2,
      icon: '📝',
      label: 'Show full plan',
      description: 'Review complete document'
    },
    {
      number: 3,
      icon: '✏️',
      label: 'Modify before saving',
      description: 'Edit sections of the plan'
    },
    {
      number: 4,
      icon: '🔄',
      label: 'Regenerate with changes',
      description: 'Go back and change decisions'
    },
    {
      number: 5,
      icon: '❌',
      label: 'Discard plan'
    }
  ],
  recommendation: '[2] to review, then approve with [1]',
  nextMenu: (choice) => {
    1 => 'savePlan',
    2 => 'showPlan',
    3 => 'editPlan',
    4 => 'regenerate',
    5 => 'discard'
  }
}
```

### Task Creation Offer Menu

```
taskCreationOfferMenu = {
  id: 'taskCreationOffer',
  title: '✅ Engineering Plan Saved!',
  context: 'Plan saved to: aidd-planning/aidd-eng-plan.md',
  options: [
    {
      number: 1,
      icon: '✅',
      label: 'Create first task from plan',
      description: 'Start implementing Phase 1',
      recommended: true
    },
    {
      number: 2,
      icon: '📊',
      label: 'Review plan in detail',
      description: 'Read phases and tasks'
    },
    {
      number: 3,
      icon: '📝',
      label: 'Share plan for review',
      description: 'Discuss with team first'
    },
    {
      number: 4,
      icon: '🏠',
      label: 'Back to main menu'
    }
  ],
  recommendation: '[2] to review, then [1] to start',
  nextMenu: (choice) => {
    1 => 'taskCreationWizard',
    2 => 'showPlan',
    3 => 'exit',
    4 => 'mainMenu'
  }
}
```

### Task Selection Menu

```
taskSelectionMenu(tasks) {
  options = tasks.slice(0, 9).map((task, i) => ({
    number: i + 1,
    icon: task.status === 'inProgress' ? '▶️' : '📋',
    label: task.name,
    description: `${task.size}, ${task.progress || 'not started'}`
  }))
  
  return {
    id: 'taskSelection',
    title: '📋 Select Task to Work On',
    context: `Found ${tasks.length} task(s)`,
    options: options,
    recommendation: tasks[0].status === 'inProgress' 
      ? '[1] - Continue in-progress task'
      : '[1] - Start highest priority',
    nextMenu: () => 'execution'
  }
}
```

## Menu Chains

Common workflow sequences:

### New Task Flow

```
mainMenu (choice 1)
  → knowledgeMenu
  → scopeMenu
  → descriptionInput
  → stateManagementMenu
  → testingMenu
  → designSystemMenu
  → complexityMenu
  → taskPreview
  → confirmMenu
  → executionMenu
  → [execute steps with approvals]
  → completionMenu [APPROVAL GATE - user must approve]
  → postCompletionMenu [only shown after user approves]
  → loggingMenu
  → commitMenu
  → doneMenu
```

### Continue Task Flow

```
mainMenu (choice 2)
  → taskSelectionMenu
  → executionMenu
  → [execute remaining steps with approvals]
  → completionMenu [APPROVAL GATE - user must approve]
  → postCompletionMenu [only shown after user approves]
  → loggingMenu
  → commitMenu
  → doneMenu
```

### Discovery Flow

```
mainMenu (choice 5)
  → problemDescriptionInput
  → whoMenu
  → frequencyMenu
  → impactMenu
  → successMetricsMenu
  → journeyPreview
  → prdMenu
  → taskCreationMenu
  → [into new task flow]
```

### HLDD Flow

```
mainMenu (choice 4)
  → featureDescriptionInput
  → optionsGeneration [generates options-[feature].md]
  → optionsReviewMenu
  → decisionWalkthrough [for each decision]
    → decisionMenu (shows options)
    → rationaleInput (optional)
    → [next decision or completion]
  → decisionsCompleteMenu [all decisions made]
  → engPlanGeneration [creates aidd-eng-plan.md]
  → engPlanReviewMenu
  → approvalMenu
  → [if approved] taskCreationOfferMenu
```

## Help Text Library

Contextual help for each menu:

```
helpText = {
  scope: """
  Task sizing affects:
  - How work is broken down
  - Time estimation accuracy
  - Sub-task creation
  
  If unsure, choose Medium [2] - most common
  Large tasks auto-break into ≤50 line sub-tasks
  """,
  
  stateManagement: """
  State management decision affects:
  - Whether MobX is used
  - Component complexity
  - Testing approach
  
  Props-only = simpler, faster
  Reactive state = more power, more complexity
  
  When unsure, choose [3] for analysis
  """,
  
  testing: """
  Testing level affects:
  - Test suite size
  - Implementation time
  - Bug catch rate
  
  Standard [2] recommended:
  - Covers all requirements
  - ~1 hour testing time
  - Good ROI on quality
  """,
  
  storybook: """
  Storybook stories are equally important as tests:
  
  Why stories matter:
  - Verify visual appearance
  - Document component API
  - Enable visual regression testing
  - Help designers review
  - Develop in isolation
  
  Coverage levels:
  - Basic: Default + 1 variant (simple components)
  - Standard: All major states (recommended)
  - Comprehensive: All states + responsive (critical components)
  - Not Applicable: Non-UI code (utils, types, stores)
  
  Time investment:
  Stories take ~50% of testing time
  Example: 1 hour tests = ~30 min stories
  
  Stories should be created early and updated at every step,
  just like tests.
  """,
  
  execution: """
  Execution modes:
  
  Full auto [1]:
  - Runs all steps without pausing
  - Shows results at end
  - Fastest option
  
  Semi-auto [2]:
  - Shows each step
  - Waits for approval
  - Balanced control
  
  Manual [3]:
  - Maximum control
  - Slowest but safest
  """,
  
  hldd: """
  HLDD (High-Level Design Doc) helps you:
  - Explore alternative approaches
  - Document trade-offs
  - Make informed decisions
  - Create comprehensive eng-plan
  
  Workflow:
  1. Generate Options Document
  2. Review alternatives and trade-offs
  3. Make decisions interactively
  4. AI generates eng-plan from decisions
  
  Use before /task for architecture planning
  """
}
```

## Constraints

- Every menu must have numbered options [1], [2], etc.
- Icons required for all options
- Descriptions optional based on wizardMode
- Recommendations always computed and shown
- Help text always available
- Maximum 9 options per menu
- Keep option labels concise (≤50 chars)
- Group related options together
